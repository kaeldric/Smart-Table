{"version":3,"sources":["smart-table.min.js"],"names":["ng","undefined","module","run","$templateCache","put","constant","pagination","template","itemsByPage","displayedPages","search","delay","inputEvent","select","mode","selectedClass","sort","ascentClass","descentClass","descendingFirst","skipNatural","pipe","controller","$scope","$parse","$filter","$attrs","copyRefs","src","concat","updateSafeCopy","safeCopy","safeGetter","pipeAfterSafeCopy","ctrl","deepDelete","object","path","indexOf","partials","split","key","pop","parentPath","join","parentObject","Object","keys","length","filtered","lastSelected","propertyName","stTable","displayGetter","displaySetter","assign","orderBy","filter","resetPageHandler","tableState","start","totalItemCount","this","stSafeSrc","$watch","safeSrc","newValue","oldValue","sortBy","predicate","reverse","isFunction","functionName","name","input","predicateObject","prop","isString","trim","output","number","numberOfPages","Math","ceil","slice","parseInt","row","rows","index","isSelected","getFilteredCollection","setFilterFunction","filterName","setSortFunction","sortFunctionName","setResetPagerHandler","resetPageHandlerName","preventPipeOnWatch","directive","restrict","link","scope","element","attr","stSetFilter","stSetSort","stSetResetPagerHandler","stConfig","$timeout","require","tableCtrl","promise","throttle","stDelay","event","stInputEvent","$observe","value","predicateExpression","stSearch","bind","evt","originalEvent","cancel","target","stSelectMode","$apply","addClass","removeClass","func","getter","isArray","stSort","sortDefault","classAscent","stClassAscent","classDescent","stClassDescent","stateClasses","stSkipNatural","stDescendingFirst","stSortDefault","$eval","stItemsByPage","stDisplayedPages","stPageChange","templateUrl","attrs","stTemplate","redraw","end","i","paginationState","prevPage","currentPage","floor","max","abs","pages","numPages","push","newPage","selectPage","page","config","stPipe","pre","pipePromise","post","angular"],"mappings":"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","file":"smart-table.min.js","sourcesContent":["(function (ng, undefined){\n    'use strict';\n\nng.module('smart-table', []).run(['$templateCache', function ($templateCache) {\n    $templateCache.put('template/smart-table/pagination.html',\n        '<nav ng-if=\"numPages && pages.length >= 2\"><ul class=\"pagination\">' +\n        '<li ng-repeat=\"page in pages\" ng-class=\"{active: page==currentPage}\"><a href=\"javascript: void(0);\" ng-click=\"selectPage(page)\">{{page}}</a></li>' +\n        '</ul></nav>');\n}]);\n\n\nng.module('smart-table')\n  .constant('stConfig', {\n    pagination: {\n      template: 'template/smart-table/pagination.html',\n      itemsByPage: 10,\n      displayedPages: 5\n    },\n    search: {\n      delay: 400, // ms\n      inputEvent: 'input'\n    },\n    select: {\n      mode: 'single',\n      selectedClass: 'st-selected'\n    },\n    sort: {\n      ascentClass: 'st-sort-ascent',\n      descentClass: 'st-sort-descent',\n      descendingFirst: false,\n      skipNatural: false,\n      delay:300\n    },\n    pipe: {\n      delay: 100 //ms\n    }\n  });\nng.module('smart-table')\n  .controller('stTableController', ['$scope', '$parse', '$filter', '$attrs', function StTableController ($scope, $parse, $filter, $attrs) {\n    var propertyName = $attrs.stTable;\n    var displayGetter = $parse(propertyName);\n    var displaySetter = displayGetter.assign;\n    var safeGetter;\n    var orderBy = $filter('orderBy');\n    var filter = $filter('filter');\n    var resetPageHandler = function() { return true; };\n    var safeCopy = copyRefs(displayGetter($scope));\n    var tableState = {\n      sort: {},\n      search: {},\n      pagination: {\n        start: 0,\n        totalItemCount: 0\n      }\n    };\n    var filtered;\n    var pipeAfterSafeCopy = true;\n    var ctrl = this;\n    var lastSelected;\n\n    function copyRefs (src) {\n      return src ? [].concat(src) : [];\n    }\n\n    function updateSafeCopy () {\n      safeCopy = copyRefs(safeGetter($scope));\n      if (pipeAfterSafeCopy === true) {\n        ctrl.pipe();\n      }\n    }\n\n    function deepDelete (object, path) {\n      if (path.indexOf('.') != -1) {\n        var partials = path.split('.');\n        var key = partials.pop();\n        var parentPath = partials.join('.');\n        var parentObject = $parse(parentPath)(object)\n        delete parentObject[key];\n        if (Object.keys(parentObject).length == 0) {\n          deepDelete(object, parentPath);\n        }\n      } else {\n        delete object[path];\n      }\n    }\n\n    if ($attrs.stSafeSrc) {\n      safeGetter = $parse($attrs.stSafeSrc);\n      $scope.$watch(function () {\n        var safeSrc = safeGetter($scope);\n        return safeSrc && safeSrc.length ? safeSrc[0] : undefined;\n      }, function (newValue, oldValue) {\n        if (newValue !== oldValue) {\n          updateSafeCopy();\n        }\n      });\n      $scope.$watch(function () {\n        var safeSrc = safeGetter($scope);\n        return safeSrc ? safeSrc.length : 0;\n      }, function (newValue, oldValue) {\n        if (newValue !== safeCopy.length) {\n          updateSafeCopy();\n        }\n      });\n      $scope.$watch(function () {\n        return safeGetter($scope);\n      }, function (newValue, oldValue) {\n        if (newValue !== oldValue) {\n          if (resetPageHandler(newValue, oldValue)){\n            tableState.pagination.start = 0;\n          }\n          updateSafeCopy();\n        }\n      });\n    }\n\n    /**\n     * sort the rows\n     * @param {Function | String} predicate - function or string which will be used as predicate for the sorting\n     * @param [reverse] - if you want to reverse the order\n     */\n    this.sortBy = function sortBy (predicate, reverse) {\n      tableState.sort.predicate = predicate;\n      tableState.sort.reverse = reverse === true;\n\n      if (ng.isFunction(predicate)) {\n        tableState.sort.functionName = predicate.name;\n      } else {\n        delete tableState.sort.functionName;\n      }\n\n      tableState.pagination.start = 0;\n      return this.pipe();\n    };\n\n    /**\n     * search matching rows\n     * @param {String} input - the input string\n     * @param {String} [predicate] - the property name against you want to check the match, otherwise it will search on all properties\n     */\n    this.search = function search (input, predicate) {\n      var predicateObject = tableState.search.predicateObject || {};\n      var prop = predicate ? predicate : '$';\n\n      input = ng.isString(input) ? input.trim() : input;\n      $parse(prop).assign(predicateObject, input);\n      // to avoid to filter out null value\n      if (!input) {\n        deepDelete(predicateObject, prop);\n      }\n      tableState.search.predicateObject = predicateObject;\n      tableState.pagination.start = 0;\n      return this.pipe();\n    };\n\n    /**\n     * this will chain the operations of sorting and filtering based on the current table state (sort options, filtering, ect)\n     */\n    this.pipe = function pipe () {\n      var pagination = tableState.pagination;\n      var output;\n      filtered = tableState.search.predicateObject ? filter(safeCopy, tableState.search.predicateObject) : safeCopy;\n      if (tableState.sort.predicate) {\n        filtered = orderBy(filtered, tableState.sort.predicate, tableState.sort.reverse);\n      }\n      pagination.totalItemCount = filtered.length;\n      if (pagination.number !== undefined) {\n        pagination.numberOfPages = filtered.length > 0 ? Math.ceil(filtered.length / pagination.number) : 1;\n        pagination.start = pagination.start >= filtered.length ? (pagination.numberOfPages - 1) * pagination.number : pagination.start;\n        output = filtered.slice(pagination.start, pagination.start + parseInt(pagination.number));\n      }\n      displaySetter($scope, output || filtered);\n    };\n\n    /**\n     * select a dataRow (it will add the attribute isSelected to the row object)\n     * @param {Object} row - the row to select\n     * @param {String} [mode] - \"single\" or \"multiple\" (multiple by default)\n     */\n    this.select = function select (row, mode) {\n      var rows = copyRefs(displayGetter($scope));\n      var index = rows.indexOf(row);\n      if (index !== -1) {\n        if (mode === 'single') {\n          row.isSelected = row.isSelected !== true;\n          if (lastSelected) {\n            lastSelected.isSelected = false;\n          }\n          lastSelected = row.isSelected === true ? row : undefined;\n        } else {\n          rows[index].isSelected = !rows[index].isSelected;\n        }\n      }\n    };\n\n    /**\n     * take a slice of the current sorted/filtered collection (pagination)\n     *\n     * @param {Number} start - start index of the slice\n     * @param {Number} number - the number of item in the slice\n     */\n    this.slice = function splice (start, number) {\n      tableState.pagination.start = start;\n      tableState.pagination.number = number;\n      return this.pipe();\n    };\n\n    /**\n     * return the current state of the table\n     * @returns {{sort: {}, search: {}, pagination: {start: number}}}\n     */\n    this.tableState = function getTableState () {\n      return tableState;\n    };\n\n    this.getFilteredCollection = function getFilteredCollection () {\n      return filtered || safeCopy;\n    };\n\n    /**\n     * Use a different filter function than the angular FilterFilter\n     * @param filterName the name under which the custom filter is registered\n     */\n    this.setFilterFunction = function setFilterFunction (filterName) {\n      filter = $filter(filterName);\n    };\n\n    /**\n     * Use a different function than the angular orderBy\n     * @param sortFunctionName the name under which the custom order function is registered\n     */\n    this.setSortFunction = function setSortFunction (sortFunctionName) {\n      orderBy = $filter(sortFunctionName);\n    };\n\n    /**\n     * Use a function to determine if pagination should be reset after data change between\n     * newValue and oldValue, as it is by default\n     * @param resetPageHandlerName the name under which the comparer function is registered\n     */\n    this.setResetPagerHandler = function setResetPagerHandler (resetPageHandlerName) {\n      resetPageHandler = $parse(resetPageHandlerName)($scope);\n    };\n\n    /**\n     * Usually when the safe copy is updated the pipe function is called.\n     * Calling this method will prevent it, which is something required when using a custom pipe function\n     */\n    this.preventPipeOnWatch = function preventPipe () {\n      pipeAfterSafeCopy = false;\n    };\n  }])\n  .directive('stTable', function () {\n    return {\n      restrict: 'A',\n      controller: 'stTableController',\n      link: function (scope, element, attr, ctrl) {\n\n        if (attr.stSetFilter) {\n          ctrl.setFilterFunction(attr.stSetFilter);\n        }\n\n        if (attr.stSetSort) {\n          ctrl.setSortFunction(attr.stSetSort);\n        }\n\n        if (attr.stSetResetPagerHandler) {\n          ctrl.setResetPagerHandler(attr.stSetResetPagerHandler);\n        }\n      }\n    };\n  });\n\nng.module('smart-table')\n  .directive('stSearch', ['stConfig', '$timeout','$parse', function (stConfig, $timeout, $parse) {\n    return {\n      require: '^stTable',\n      link: function (scope, element, attr, ctrl) {\n        var tableCtrl = ctrl;\n        var promise = null;\n        var throttle = attr.stDelay || stConfig.search.delay;\n        var event = attr.stInputEvent || stConfig.search.inputEvent;\n\n        attr.$observe('stSearch', function (newValue, oldValue) {\n          var input = element[0].value;\n          if (newValue !== oldValue && input) {\n            ctrl.tableState().search = {};\n            tableCtrl.search(input, newValue);\n          }\n        });\n\n        //table state -> view\n        scope.$watch(function () {\n          return ctrl.tableState().search;\n        }, function (newValue, oldValue) {\n          var predicateExpression = attr.stSearch || '$';\n          if (newValue.predicateObject && $parse(predicateExpression)(newValue.predicateObject) !== element[0].value) {\n            element[0].value = $parse(predicateExpression)(newValue.predicateObject) || '';\n          }\n        }, true);\n\n        // view -> table state\n        element.bind(event, function (evt) {\n          evt = evt.originalEvent || evt;\n          if (promise !== null) {\n            $timeout.cancel(promise);\n          }\n\n          promise = $timeout(function () {\n            tableCtrl.search(evt.target.value, attr.stSearch || '');\n            promise = null;\n          }, throttle);\n        });\n      }\n    };\n  }]);\n\nng.module('smart-table')\n  .directive('stSelectRow', ['stConfig', function (stConfig) {\n    return {\n      restrict: 'A',\n      require: '^stTable',\n      scope: {\n        row: '=stSelectRow'\n      },\n      link: function (scope, element, attr, ctrl) {\n        var mode = attr.stSelectMode || stConfig.select.mode;\n        element.bind('click', function () {\n          scope.$apply(function () {\n            ctrl.select(scope.row, mode);\n          });\n        });\n\n        scope.$watch('row.isSelected', function (newValue) {\n          if (newValue === true) {\n            element.addClass(stConfig.select.selectedClass);\n          } else {\n            element.removeClass(stConfig.select.selectedClass);\n          }\n        });\n      }\n    };\n  }]);\n\nng.module('smart-table')\n  .directive('stSort', ['stConfig', '$parse', '$timeout', function (stConfig, $parse, $timeout) {\n    return {\n      restrict: 'A',\n      require: '^stTable',\n      link: function (scope, element, attr, ctrl) {\n\n        var predicate = attr.stSort;\n        var getter = $parse(predicate);\n        var index = 0;\n        var classAscent = attr.stClassAscent || stConfig.sort.ascentClass;\n        var classDescent = attr.stClassDescent || stConfig.sort.descentClass;\n        var stateClasses = [classAscent, classDescent];\n        var sortDefault;\n        var skipNatural = attr.stSkipNatural !== undefined ? attr.stSkipNatural : stConfig.sort.skipNatural;\n        var descendingFirst = attr.stDescendingFirst !== undefined ? attr.stDescendingFirst : stConfig.sort.descendingFirst;\n        var promise = null;\n        var throttle = attr.stDelay || stConfig.sort.delay;\n\n        if (attr.stSortDefault) {\n          sortDefault = scope.$eval(attr.stSortDefault) !== undefined ? scope.$eval(attr.stSortDefault) : attr.stSortDefault;\n        }\n\n        //view --> table state\n        function sort () {\n          if (descendingFirst) {\n            index = index === 0 ? 2 : index - 1;\n          } else {\n            index++;\n          }\n\n          var func;\n          predicate = ng.isFunction(getter(scope)) || ng.isArray(getter(scope)) ? getter(scope) : attr.stSort;\n          if (index % 3 === 0 && !!skipNatural !== true) {\n            //manual reset\n            index = 0;\n            ctrl.tableState().sort = {};\n            ctrl.tableState().pagination.start = 0;\n            func = ctrl.pipe.bind(ctrl);\n          } else {\n            func = ctrl.sortBy.bind(ctrl, predicate, index % 2 === 0);\n          }\n          if (promise !== null) {\n            $timeout.cancel(promise);\n          }\n          if (throttle < 0) {\n            func();\n          } else {\n            promise = $timeout(func, throttle);\n          }\n        }\n\n        element.bind('click', function sortClick () {\n          if (predicate) {\n            scope.$apply(sort);\n          }\n        });\n\n        if (sortDefault) {\n          index = sortDefault === 'reverse' ? 1 : 0;\n          sort();\n        }\n\n        //table state --> view\n        scope.$watch(function () {\n          return ctrl.tableState().sort;\n        }, function (newValue) {\n          if (newValue.predicate !== predicate) {\n            index = 0;\n            element\n              .removeClass(classAscent)\n              .removeClass(classDescent);\n          } else {\n            index = newValue.reverse === true ? 2 : 1;\n            element\n              .removeClass(stateClasses[index % 2])\n              .addClass(stateClasses[index - 1]);\n          }\n        }, true);\n      }\n    };\n  }]);\n\nng.module('smart-table')\n  .directive('stPagination', ['stConfig', function (stConfig) {\n    return {\n      restrict: 'EA',\n      require: '^stTable',\n      scope: {\n        stItemsByPage: '=?',\n        stDisplayedPages: '=?',\n        stPageChange: '&'\n      },\n      templateUrl: function (element, attrs) {\n        if (attrs.stTemplate) {\n          return attrs.stTemplate;\n        }\n        return stConfig.pagination.template;\n      },\n      link: function (scope, element, attrs, ctrl) {\n\n        scope.stItemsByPage = scope.stItemsByPage ? +(scope.stItemsByPage) : stConfig.pagination.itemsByPage;\n        scope.stDisplayedPages = scope.stDisplayedPages ? +(scope.stDisplayedPages) : stConfig.pagination.displayedPages;\n\n        scope.currentPage = 1;\n        scope.pages = [];\n\n        function redraw () {\n          var paginationState = ctrl.tableState().pagination;\n          var start = 1;\n          var end;\n          var i;\n          var prevPage = scope.currentPage;\n          scope.totalItemCount = paginationState.totalItemCount;\n          scope.currentPage = Math.floor(paginationState.start / paginationState.number) + 1;\n\n          start = Math.max(start, scope.currentPage - Math.abs(Math.floor(scope.stDisplayedPages / 2)));\n          end = start + scope.stDisplayedPages;\n\n          if (end > paginationState.numberOfPages) {\n            end = paginationState.numberOfPages + 1;\n            start = Math.max(1, end - scope.stDisplayedPages);\n          }\n\n          scope.pages = [];\n          scope.numPages = paginationState.numberOfPages;\n\n          for (i = start; i < end; i++) {\n            scope.pages.push(i);\n          }\n\n          if (prevPage !== scope.currentPage) {\n            scope.stPageChange({newPage: scope.currentPage});\n          }\n        }\n\n        //table state --> view\n        scope.$watch(function () {\n          return ctrl.tableState().pagination;\n        }, redraw, true);\n\n        //scope --> table state  (--> view)\n        scope.$watch('stItemsByPage', function (newValue, oldValue) {\n          if (newValue !== oldValue) {\n            scope.selectPage(1);\n          }\n        });\n\n        scope.$watch('stDisplayedPages', redraw);\n\n        //view -> table state\n        scope.selectPage = function (page) {\n          if (page > 0 && page <= scope.numPages) {\n            ctrl.slice((page - 1) * scope.stItemsByPage, scope.stItemsByPage);\n          }\n        };\n\n        if (!ctrl.tableState().pagination.number) {\n          ctrl.slice(0, scope.stItemsByPage);\n        }\n      }\n    };\n  }]);\n\nng.module('smart-table')\n  .directive('stPipe', ['stConfig', '$timeout', function (config, $timeout) {\n    return {\n      require: 'stTable',\n      scope: {\n        stPipe: '='\n      },\n      link: {\n\n        pre: function (scope, element, attrs, ctrl) {\n\n          var pipePromise = null;\n\n          if (ng.isFunction(scope.stPipe)) {\n            ctrl.preventPipeOnWatch();\n            ctrl.pipe = function () {\n\n              if (pipePromise !== null) {\n                $timeout.cancel(pipePromise)\n              }\n\n              pipePromise = $timeout(function () {\n                scope.stPipe(ctrl.tableState(), ctrl);\n              }, config.pipe.delay);\n\n              return pipePromise;\n            }\n          }\n        },\n\n        post: function (scope, element, attrs, ctrl) {\n          ctrl.pipe();\n        }\n      }\n    };\n  }]);\n\n})(angular);"],"sourceRoot":"/source/"}